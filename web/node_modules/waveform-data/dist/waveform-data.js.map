{"version":3,"file":"waveform-data.js","sources":["../src/waveform-data-channel.js","../src/waveform-generator.js","../src/waveform-utils.js","../src/waveform-data.js"],"sourcesContent":["/**\n * Provides access to the waveform data for a single audio channel.\n */\n\nfunction WaveformDataChannel(waveformData, channelIndex) {\n  this._waveformData = waveformData;\n  this._channelIndex = channelIndex;\n}\n\n/**\n * Returns the waveform minimum at the given index position.\n */\n\nWaveformDataChannel.prototype.min_sample = function(index) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2;\n\n  return this._waveformData._at(offset);\n};\n\n/**\n * Returns the waveform maximum at the given index position.\n */\n\nWaveformDataChannel.prototype.max_sample = function(index) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2 + 1;\n\n  return this._waveformData._at(offset);\n};\n\n/**\n * Sets the waveform minimum at the given index position.\n */\n\nWaveformDataChannel.prototype.set_min_sample = function(index, sample) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2;\n\n  return this._waveformData._set_at(offset, sample);\n};\n\n/**\n * Sets the waveform maximum at the given index position.\n */\n\nWaveformDataChannel.prototype.set_max_sample = function(index, sample) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2 + 1;\n\n  return this._waveformData._set_at(offset, sample);\n};\n\n/**\n * Returns all the waveform minimum values as an array.\n */\n\nWaveformDataChannel.prototype.min_array = function() {\n  var length = this._waveformData.length;\n  var values = [];\n\n  for (var i = 0; i < length; i++) {\n    values.push(this.min_sample(i));\n  }\n\n  return values;\n};\n\n/**\n * Returns all the waveform maximum values as an array.\n */\n\nWaveformDataChannel.prototype.max_array = function() {\n  var length = this._waveformData.length;\n  var values = [];\n\n  for (var i = 0; i < length; i++) {\n    values.push(this.max_sample(i));\n  }\n\n  return values;\n};\n\nexport default WaveformDataChannel;\n","/**\n * AudioBuffer-based WaveformData generator\n *\n * Adapted from BlockFile::CalcSummary in Audacity, with permission.\n * See https://github.com/audacity/audacity/blob/\n *   1108c1376c09166162335fab4743008cba57c4ee/src/BlockFile.cpp#L198\n */\n\nvar INT8_MAX = 127;\nvar INT8_MIN = -128;\n\nvar INT16_MAX = 32767;\nvar INT16_MIN = -32768;\n\nfunction calculateWaveformDataLength(audio_sample_count, scale) {\n  var data_length = Math.floor(audio_sample_count / scale);\n\n  var samples_remaining = audio_sample_count - (data_length * scale);\n\n  if (samples_remaining > 0) {\n    data_length++;\n  }\n\n  return data_length;\n}\n\nfunction generateWaveformData(options) {\n  var scale = options.scale;\n  var amplitude_scale = options.amplitude_scale;\n  var split_channels = options.split_channels;\n  var length = options.length;\n  var sample_rate = options.sample_rate;\n  var channels = options.channels.map(function(channel) {\n    return new Float32Array(channel);\n  });\n  var output_channels = split_channels ? channels.length : 1;\n  var header_size = 24;\n  var data_length = calculateWaveformDataLength(length, scale);\n  var bytes_per_sample = options.bits === 8 ? 1 : 2;\n  var total_size = header_size + data_length * 2 * bytes_per_sample * output_channels;\n  var buffer = new ArrayBuffer(total_size);\n  var data_view = new DataView(buffer);\n\n  var scale_counter = 0;\n  var offset = header_size;\n  var channel, i;\n\n  var min_value = new Array(output_channels);\n  var max_value = new Array(output_channels);\n\n  for (channel = 0; channel < output_channels; channel++) {\n    min_value[channel] = Infinity;\n    max_value[channel] = -Infinity;\n  }\n\n  var range_min = options.bits === 8 ? INT8_MIN : INT16_MIN;\n  var range_max = options.bits === 8 ? INT8_MAX : INT16_MAX;\n\n  data_view.setInt32(0, 2, true); // Version\n  data_view.setUint32(4, options.bits === 8, true); // Is 8 bit?\n  data_view.setInt32(8, sample_rate, true); // Sample rate\n  data_view.setInt32(12, scale, true); // Scale\n  data_view.setInt32(16, data_length, true); // Length\n  data_view.setInt32(20, output_channels, true);\n\n  for (i = 0; i < length; i++) {\n    var sample = 0;\n\n    if (output_channels === 1) {\n      for (channel = 0; channel < channels.length; ++channel) {\n        sample += channels[channel][i];\n      }\n\n      sample = Math.floor(range_max * sample * amplitude_scale / channels.length);\n\n      if (sample < min_value[0]) {\n        min_value[0] = sample;\n\n        if (min_value[0] < range_min) {\n          min_value[0] = range_min;\n        }\n      }\n\n      if (sample > max_value[0]) {\n        max_value[0] = sample;\n\n        if (max_value[0] > range_max) {\n          max_value[0] = range_max;\n        }\n      }\n    }\n    else {\n      for (channel = 0; channel < output_channels; ++channel) {\n        sample = Math.floor(range_max * channels[channel][i] * amplitude_scale);\n\n        if (sample < min_value[channel]) {\n          min_value[channel] = sample;\n\n          if (min_value[channel] < range_min) {\n            min_value[channel] = range_min;\n          }\n        }\n\n        if (sample > max_value[channel]) {\n          max_value[channel] = sample;\n\n          if (max_value[channel] > range_max) {\n            max_value[channel] = range_max;\n          }\n        }\n      }\n    }\n\n    if (++scale_counter === scale) {\n      for (channel = 0; channel < output_channels; channel++) {\n        if (options.bits === 8) {\n          data_view.setInt8(offset++, min_value[channel]);\n          data_view.setInt8(offset++, max_value[channel]);\n        }\n        else {\n          data_view.setInt16(offset, min_value[channel], true);\n          data_view.setInt16(offset + 2, max_value[channel], true);\n          offset += 4;\n        }\n\n        min_value[channel] = Infinity;\n        max_value[channel] = -Infinity;\n      }\n\n      scale_counter = 0;\n    }\n  }\n\n  if (scale_counter > 0) {\n    for (channel = 0; channel < output_channels; channel++) {\n      if (options.bits === 8) {\n        data_view.setInt8(offset++, min_value[channel]);\n        data_view.setInt8(offset++, max_value[channel]);\n      }\n      else {\n        data_view.setInt16(offset, min_value[channel], true);\n        data_view.setInt16(offset + 2, max_value[channel], true);\n      }\n    }\n  }\n\n  return buffer;\n}\n\nexport { generateWaveformData };\n","export function isJsonWaveformData(data) {\n  return data &&\n    typeof data === \"object\" &&\n    \"sample_rate\" in data &&\n    \"samples_per_pixel\" in data &&\n    \"bits\" in data &&\n    \"length\" in data &&\n    \"data\" in data;\n}\n\nexport function isBinaryWaveformData(data) {\n  var isCompatible = data && typeof data === \"object\" && \"byteLength\" in data;\n\n  if (isCompatible) {\n    var view = new DataView(data);\n    var version = view.getInt32(0, true);\n\n    if (version !== 1 && version !== 2) {\n      throw new TypeError(\"WaveformData.create(): This waveform data version not supported\");\n    }\n  }\n\n  return isCompatible;\n}\n\nexport function convertJsonToBinary(data) {\n  var waveformData = data.data;\n  var channels = data.channels || 1;\n  var header_size = 24; // version 2\n  var bytes_per_sample = data.bits === 8 ? 1 : 2;\n  var expected_length = data.length * 2 * channels;\n\n  if (waveformData.length !== expected_length) {\n    throw new Error(\"WaveformData.create(): Length mismatch in JSON waveform data\");\n  }\n\n  var total_size = header_size + waveformData.length * bytes_per_sample;\n\n  var array_buffer = new ArrayBuffer(total_size);\n  var data_object = new DataView(array_buffer);\n\n  data_object.setInt32(0, 2, true); // Version\n  data_object.setUint32(4, data.bits === 8, true);\n  data_object.setInt32(8, data.sample_rate, true);\n  data_object.setInt32(12, data.samples_per_pixel, true);\n  data_object.setInt32(16, data.length, true);\n  data_object.setInt32(20, channels, true);\n\n  var index = header_size;\n\n  var i;\n\n  if (data.bits === 8) {\n    for (i = 0; i < waveformData.length; i++) {\n      data_object.setInt8(index++, waveformData[i], true);\n    }\n  }\n  else {\n    for (i = 0; i < waveformData.length; i++) {\n      data_object.setInt16(index, waveformData[i], true);\n\n      index += 2;\n    }\n  }\n\n  return array_buffer;\n}\n","import WaveformDataChannel from \"./waveform-data-channel\";\nimport { generateWaveformData } from \"./waveform-generator\";\nimport { isJsonWaveformData, isBinaryWaveformData, convertJsonToBinary } from \"./waveform-utils\";\nimport WaveformDataWorker from \"web-worker:./waveform-data-worker\";\n\n/**\n * Provides access to waveform data.\n */\n\nfunction WaveformData(data) {\n  if (isJsonWaveformData(data)) {\n    data = convertJsonToBinary(data);\n  }\n\n  if (isBinaryWaveformData(data)) {\n    this._data = new DataView(data);\n    this._offset = this._version() === 2 ? 24 : 20;\n\n    this._channels = [];\n\n    for (var channel = 0; channel < this.channels; channel++) {\n      this._channels[channel] = new WaveformDataChannel(this, channel);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"WaveformData.create(): Unknown data format\"\n    );\n  }\n}\n\nvar defaultOptions = {\n  scale: 512,\n  bits: 8,\n  amplitude_scale: 1.0,\n  split_channels: false,\n  disable_worker: false\n};\n\nfunction getOptions(options) {\n  var opts = {\n    scale: options.scale || defaultOptions.scale,\n    bits: options.bits || defaultOptions.bits,\n    amplitude_scale: options.amplitude_scale || defaultOptions.amplitude_scale,\n    split_channels: options.split_channels || defaultOptions.split_channels,\n    disable_worker: options.disable_worker || defaultOptions.disable_worker\n  };\n\n  return opts;\n}\n\nfunction getChannelData(audio_buffer) {\n  var channels = [];\n\n  for (var i = 0; i < audio_buffer.numberOfChannels; ++i) {\n    channels.push(audio_buffer.getChannelData(i).buffer);\n  }\n\n  return channels;\n}\n\nfunction createFromAudioBuffer(audio_buffer, options, callback) {\n  var channels = getChannelData(audio_buffer);\n\n  if (options.disable_worker) {\n    var buffer = generateWaveformData({\n      scale: options.scale,\n      bits: options.bits,\n      amplitude_scale: options.amplitude_scale,\n      split_channels: options.split_channels,\n      length: audio_buffer.length,\n      sample_rate: audio_buffer.sampleRate,\n      channels: channels\n    });\n\n    callback(null, new WaveformData(buffer), audio_buffer);\n  }\n  else {\n    var worker = new WaveformDataWorker();\n\n    worker.onmessage = function(evt) {\n      callback(null, new WaveformData(evt.data), audio_buffer);\n    };\n\n    worker.postMessage({\n      scale: options.scale,\n      bits: options.bits,\n      amplitude_scale: options.amplitude_scale,\n      split_channels: options.split_channels,\n      length: audio_buffer.length,\n      sample_rate: audio_buffer.sampleRate,\n      channels: channels\n    }, channels);\n  }\n}\n\nfunction createFromArrayBuffer(audioContext, audioData, options, callback) {\n  // The following function is a workaround for a Webkit bug where decodeAudioData\n  // invokes the errorCallback with null instead of a DOMException.\n  // See https://webaudio.github.io/web-audio-api/#dom-baseaudiocontext-decodeaudiodata\n  // and http://stackoverflow.com/q/10365335/103396\n\n  function errorCallback(error) {\n    if (!error) {\n      error = new DOMException(\"EncodingError\");\n    }\n\n    callback(error);\n    // prevent double-calling the callback on errors:\n    callback = function() { };\n  }\n\n  var promise = audioContext.decodeAudioData(\n    audioData,\n    function(audio_buffer) {\n      createFromAudioBuffer(audio_buffer, options, callback);\n    },\n    errorCallback\n  );\n\n  if (promise) {\n    promise.catch(errorCallback);\n  }\n}\n\n/**\n * Creates and returns a WaveformData instance from the given waveform data.\n */\n\nWaveformData.create = function create(data) {\n  return new WaveformData(data);\n};\n\n/**\n * Creates a WaveformData instance from audio.\n */\n\nWaveformData.createFromAudio = function(options, callback) {\n  var opts = getOptions(options);\n\n  if (options.audio_context && options.array_buffer) {\n    return createFromArrayBuffer(options.audio_context, options.array_buffer, opts, callback);\n  }\n  else if (options.audio_buffer) {\n    return createFromAudioBuffer(options.audio_buffer, opts, callback);\n  }\n  else {\n    throw new TypeError(\n      // eslint-disable-next-line\n      \"WaveformData.createFromAudio(): Pass either an AudioContext and ArrayBuffer, or an AudioBuffer object\"\n    );\n  }\n};\n\nfunction WaveformResampler(options) {\n  this._inputData = options.waveformData;\n\n  // Scale we want to reach\n  this._output_samples_per_pixel = options.scale;\n\n  this._scale = this._inputData.scale; // scale we are coming from\n\n  // The amount of data we want to resample i.e. final zoom want to resample\n  // all data but for intermediate zoom we want to resample subset\n  this._input_buffer_size = this._inputData.length;\n\n  var input_buffer_length_samples = this._input_buffer_size * this._inputData.scale;\n  var output_buffer_length_samples =\n    Math.ceil(input_buffer_length_samples / this._output_samples_per_pixel);\n\n  var output_header_size = 24; // version 2\n  var bytes_per_sample = this._inputData.bits === 8 ? 1 : 2;\n  var total_size = output_header_size\n                  + output_buffer_length_samples * 2 * this._inputData.channels * bytes_per_sample;\n\n  this._output_data = new ArrayBuffer(total_size);\n\n  this.output_dataview = new DataView(this._output_data);\n\n  this.output_dataview.setInt32(0, 2, true); // Version\n  this.output_dataview.setUint32(4, this._inputData.bits === 8, true); // Is 8 bit?\n  this.output_dataview.setInt32(8, this._inputData.sample_rate, true);\n  this.output_dataview.setInt32(12, this._output_samples_per_pixel, true);\n  this.output_dataview.setInt32(16, output_buffer_length_samples, true);\n  this.output_dataview.setInt32(20, this._inputData.channels, true);\n\n  this._outputWaveformData = new WaveformData(this._output_data);\n\n  this._input_index = 0;\n  this._output_index = 0;\n\n  var channels = this._inputData.channels;\n\n  this._min = new Array(channels);\n  this._max = new Array(channels);\n\n  var channel;\n\n  for (channel = 0; channel < channels; ++channel) {\n    if (this._input_buffer_size > 0) {\n      this._min[channel] = this._inputData.channel(channel).min_sample(this._input_index);\n      this._max[channel] = this._inputData.channel(channel).max_sample(this._input_index);\n    }\n    else {\n      this._min[channel] = 0;\n      this._max[channel] = 0;\n    }\n  }\n\n  this._min_value = this._inputData.bits === 8 ? -128 : -32768;\n  this._max_value = this._inputData.bits === 8 ?  127 :  32767;\n\n  this._where = 0;\n  this._prev_where = 0;\n  this._stop = 0;\n  this._last_input_index = 0;\n}\n\nWaveformResampler.prototype.sample_at_pixel = function(x) {\n  return Math.floor(x * this._output_samples_per_pixel);\n};\n\nWaveformResampler.prototype.next = function() {\n  var count = 0;\n  var total = 1000;\n  var channels = this._inputData.channels;\n  var channel;\n  var value;\n  var i;\n\n  while (this._input_index < this._input_buffer_size && count < total) {\n    while (Math.floor(this.sample_at_pixel(this._output_index) / this._scale) ===\n           this._input_index) {\n      if (this._output_index > 0) {\n        for (i = 0; i < channels; ++i) {\n          channel = this._outputWaveformData.channel(i);\n\n          channel.set_min_sample(this._output_index - 1, this._min[i]);\n          channel.set_max_sample(this._output_index - 1, this._max[i]);\n        }\n      }\n\n      this._last_input_index = this._input_index;\n\n      this._output_index++;\n\n      this._where      = this.sample_at_pixel(this._output_index);\n      this._prev_where = this.sample_at_pixel(this._output_index - 1);\n\n      if (this._where !== this._prev_where) {\n        for (i = 0; i < channels; ++i) {\n          this._min[i] = this._max_value;\n          this._max[i] = this._min_value;\n        }\n      }\n    }\n\n    this._where = this.sample_at_pixel(this._output_index);\n    this._stop = Math.floor(this._where / this._scale);\n\n    if (this._stop > this._input_buffer_size) {\n      this._stop = this._input_buffer_size;\n    }\n\n    while (this._input_index < this._stop) {\n      for (i = 0; i < channels; ++i) {\n        channel = this._inputData.channel(i);\n\n        value = channel.min_sample(this._input_index);\n\n        if (value < this._min[i]) {\n          this._min[i] = value;\n        }\n\n        value = channel.max_sample(this._input_index);\n\n        if (value > this._max[i]) {\n          this._max[i] = value;\n        }\n      }\n\n      this._input_index++;\n    }\n\n    count++;\n  }\n\n  if (this._input_index < this._input_buffer_size) {\n    // More to do\n    return false;\n  }\n  else {\n    // Done\n    if (this._input_index !== this._last_input_index) {\n      for (i = 0; i < channels; ++i) {\n        channel = this._outputWaveformData.channel(i);\n\n        channel.set_min_sample(this._output_index - 1, this._min[i]);\n        channel.set_max_sample(this._output_index - 1, this._max[i]);\n      }\n    }\n\n    return true;\n  }\n};\n\nWaveformResampler.prototype.getOutputData = function() {\n  return this._output_data;\n};\n\nWaveformData.prototype = {\n\n  _getResampleOptions(options) {\n    var opts = {};\n\n    opts.scale = options.scale;\n    opts.width = options.width;\n\n    if (opts.width != null && (typeof opts.width !== \"number\" || opts.width <= 0)) {\n      throw new RangeError(\"WaveformData.resample(): width should be a positive integer value\");\n    }\n\n    if (opts.scale != null && (typeof opts.scale !== \"number\" || opts.scale <= 0)) {\n      throw new RangeError(\"WaveformData.resample(): scale should be a positive integer value\");\n    }\n\n    if (!opts.scale && !opts.width) {\n      throw new Error(\"WaveformData.resample(): Missing scale or width option\");\n    }\n\n    if (opts.width) {\n      // Calculate the target scale for the resampled waveform\n      opts.scale = Math.floor(this.duration * this.sample_rate / opts.width);\n    }\n\n    if (opts.scale < this.scale) {\n      throw new Error(\n        \"WaveformData.resample(): Zoom level \" + opts.scale +\n        \" too low, minimum: \" + this.scale\n      );\n    }\n\n    opts.abortSignal = options.abortSignal;\n\n    return opts;\n  },\n\n  resample: function(options) {\n    options = this._getResampleOptions(options);\n    options.waveformData = this;\n\n    var resampler = new WaveformResampler(options);\n\n    while (!resampler.next()) {\n      // nothing\n    }\n\n    return new WaveformData(resampler.getOutputData());\n  },\n\n  /**\n   * Concatenates with one or more other waveforms, returning a new WaveformData object.\n   */\n\n  concat: function() {\n    var self = this;\n    var otherWaveforms = Array.prototype.slice.call(arguments);\n\n    // Check that all the supplied waveforms are compatible\n    otherWaveforms.forEach(function(otherWaveform) {\n      if (self.channels !== otherWaveform.channels ||\n        self.sample_rate !== otherWaveform.sample_rate ||\n        self.bits !== otherWaveform.bits ||\n        self.scale !== otherWaveform.scale) {\n        throw new Error(\"WaveformData.concat(): Waveforms are incompatible\");\n      }\n    });\n\n    var combinedBuffer = this._concatBuffers.apply(this, otherWaveforms);\n\n    return WaveformData.create(combinedBuffer);\n  },\n\n  /**\n   * Returns a new ArrayBuffer with the concatenated waveform.\n   * All waveforms must have identical metadata (version, channels, etc)\n   */\n\n  _concatBuffers: function() {\n    var otherWaveforms = Array.prototype.slice.call(arguments);\n    var headerSize = this._offset;\n    var totalSize = headerSize;\n    var totalDataLength = 0;\n    var bufferCollection = [this].concat(otherWaveforms).map(function(w) {\n      return w._data.buffer;\n    });\n    var i, buffer;\n\n    for (i = 0; i < bufferCollection.length; i++) {\n      buffer = bufferCollection[i];\n      var dataSize = new DataView(buffer).getInt32(16, true);\n\n      totalSize += buffer.byteLength - headerSize;\n      totalDataLength += dataSize;\n    }\n\n    var totalBuffer = new ArrayBuffer(totalSize);\n    var sourceHeader = new DataView(bufferCollection[0]);\n    var totalBufferView = new DataView(totalBuffer);\n\n    // Copy the header from the first chunk\n    for (i = 0; i < headerSize; i++) {\n      totalBufferView.setUint8(i, sourceHeader.getUint8(i));\n    }\n    // Rewrite the data-length header item to reflect all of the samples concatenated together\n    totalBufferView.setInt32(16, totalDataLength, true);\n\n    var offset = 0;\n    var dataOfTotalBuffer = new Uint8Array(totalBuffer, headerSize);\n\n    for (i = 0; i < bufferCollection.length; i++) {\n      buffer = bufferCollection[i];\n      dataOfTotalBuffer.set(new Uint8Array(buffer, headerSize), offset);\n      offset += buffer.byteLength - headerSize;\n    }\n\n    return totalBuffer;\n  },\n\n  slice: function(options) {\n    var startIndex = 0;\n    var endIndex = 0;\n\n    if (options.startIndex != null && options.endIndex != null) {\n      startIndex = options.startIndex;\n      endIndex = options.endIndex;\n    }\n    else if (options.startTime != null && options.endTime != null) {\n      startIndex = this.at_time(options.startTime);\n      endIndex = this.at_time(options.endTime);\n    }\n\n    if (startIndex < 0) {\n      throw new RangeError(\"startIndex or startTime must not be negative\");\n    }\n\n    if (endIndex < 0) {\n      throw new RangeError(\"endIndex or endTime must not be negative\");\n    }\n\n    if (startIndex > this.length) {\n      startIndex = this.length;\n    }\n\n    if (endIndex > this.length) {\n      endIndex = this.length;\n    }\n\n    if (startIndex > endIndex) {\n      startIndex = endIndex;\n    }\n\n    var length = endIndex - startIndex;\n\n    var header_size = 24; // Version 2\n    var bytes_per_sample = this.bits === 8 ? 1 : 2;\n    var total_size = header_size\n                   + length * 2 * this.channels * bytes_per_sample;\n\n    var output_data = new ArrayBuffer(total_size);\n    var output_dataview = new DataView(output_data);\n\n    output_dataview.setInt32(0, 2, true); // Version\n    output_dataview.setUint32(4, this.bits === 8, true); // Is 8 bit?\n    output_dataview.setInt32(8, this.sample_rate, true);\n    output_dataview.setInt32(12, this.scale, true);\n    output_dataview.setInt32(16, length, true);\n    output_dataview.setInt32(20, this.channels, true);\n\n    for (var i = 0; i < length * this.channels * 2; i++) {\n      var sample = this._at(startIndex * this.channels * 2 + i);\n\n      if (this.bits === 8) {\n        output_dataview.setInt8(header_size + i, sample);\n      }\n      else {\n        output_dataview.setInt16(header_size + i * 2, sample, true);\n      }\n    }\n\n    return new WaveformData(output_data);\n  },\n\n  /**\n   * Returns the data format version number.\n   */\n\n  _version: function() {\n    return this._data.getInt32(0, true);\n  },\n\n  /**\n   * Returns the length of the waveform, in pixels.\n   */\n\n  get length() {\n    return this._data.getUint32(16, true);\n  },\n\n  /**\n   * Returns the number of bits per sample, either 8 or 16.\n   */\n\n  get bits() {\n    var bits = Boolean(this._data.getUint32(4, true));\n\n    return bits ? 8 : 16;\n  },\n\n  /**\n   * Returns the (approximate) duration of the audio file, in seconds.\n   */\n\n  get duration() {\n    return this.length * this.scale / this.sample_rate;\n  },\n\n  /**\n   * Returns the number of pixels per second.\n   */\n\n  get pixels_per_second() {\n    return this.sample_rate / this.scale;\n  },\n\n  /**\n   * Returns the amount of time represented by a single pixel, in seconds.\n   */\n\n  get seconds_per_pixel() {\n    return this.scale / this.sample_rate;\n  },\n\n  /**\n   * Returns the number of waveform channels.\n   */\n\n  get channels() {\n    if (this._version() === 2) {\n      return this._data.getInt32(20, true);\n    }\n    else {\n      return 1;\n    }\n  },\n\n  /**\n   * Returns a waveform channel.\n   */\n\n  channel: function(index) {\n    if (index >= 0 && index < this._channels.length) {\n      return this._channels[index];\n    }\n    else {\n      throw new RangeError(\"Invalid channel: \" + index);\n    }\n  },\n\n  /**\n   * Returns the number of audio samples per second.\n   */\n\n  get sample_rate() {\n    return this._data.getInt32(8, true);\n  },\n\n  /**\n   * Returns the number of audio samples per pixel.\n   */\n\n  get scale() {\n    return this._data.getInt32(12, true);\n  },\n\n  /**\n   * Returns a waveform data value at a specific offset.\n   */\n\n  _at: function at_sample(index) {\n    if (this.bits === 8) {\n      return this._data.getInt8(this._offset + index);\n    }\n    else {\n      return this._data.getInt16(this._offset + index * 2, true);\n    }\n  },\n\n  /**\n   * Sets a waveform data value at a specific offset.\n   */\n\n  _set_at: function set_at(index, sample) {\n    if (this.bits === 8) {\n      return this._data.setInt8(this._offset + index, sample);\n    }\n    else {\n      return this._data.setInt16(this._offset + index * 2, sample, true);\n    }\n  },\n\n  /**\n   * Returns the waveform data index position for a given time.\n   */\n\n  at_time: function at_time(time) {\n    return Math.floor(time * this.sample_rate / this.scale);\n  },\n\n  /**\n   * Returns the time in seconds for a given index.\n   */\n\n  time: function time(index) {\n    return index * this.scale / this.sample_rate;\n  },\n\n  /**\n   * Returns an object containing the waveform data.\n   */\n\n  toJSON: function() {\n    const waveform = {\n      version: 2,\n      channels: this.channels,\n      sample_rate: this.sample_rate,\n      samples_per_pixel: this.scale,\n      bits: this.bits,\n      length: this.length,\n      data: []\n    };\n\n    for (var i = 0; i < this.length; i++) {\n      for (var channel = 0; channel < this.channels; channel++) {\n        waveform.data.push(this.channel(channel).min_sample(i));\n        waveform.data.push(this.channel(channel).max_sample(i));\n      }\n    }\n\n    return waveform;\n  },\n\n  /**\n   * Returns the waveform data in binary format as an ArrayBuffer.\n   */\n\n  toArrayBuffer: function() {\n    return this._data.buffer;\n  }\n};\n\nexport default WaveformData;\n"],"names":["WaveformDataChannel","waveformData","channelIndex","_waveformData","_channelIndex","prototype","min_sample","index","offset","channels","_at","max_sample","set_min_sample","sample","_set_at","set_max_sample","min_array","length","values","i","push","max_array","INT8_MAX","INT8_MIN","INT16_MAX","INT16_MIN","calculateWaveformDataLength","audio_sample_count","scale","data_length","Math","floor","samples_remaining","generateWaveformData","options","amplitude_scale","split_channels","sample_rate","map","channel","Float32Array","output_channels","header_size","bytes_per_sample","bits","total_size","buffer","ArrayBuffer","data_view","DataView","scale_counter","min_value","Array","max_value","Infinity","range_min","range_max","setInt32","setUint32","setInt8","setInt16","isJsonWaveformData","data","_typeof","isBinaryWaveformData","isCompatible","view","version","getInt32","TypeError","convertJsonToBinary","expected_length","Error","array_buffer","data_object","samples_per_pixel","WaveformData","_data","_offset","_version","_channels","defaultOptions","disable_worker","getOptions","opts","getChannelData","audio_buffer","numberOfChannels","createFromAudioBuffer","callback","sampleRate","worker","WaveformDataWorker","onmessage","evt","postMessage","createFromArrayBuffer","audioContext","audioData","errorCallback","error","DOMException","promise","decodeAudioData","catch","create","createFromAudio","audio_context","WaveformResampler","_inputData","_output_samples_per_pixel","_scale","_input_buffer_size","input_buffer_length_samples","output_buffer_length_samples","ceil","output_header_size","_output_data","output_dataview","_outputWaveformData","_input_index","_output_index","_min","_max","_min_value","_max_value","_where","_prev_where","_stop","_last_input_index","sample_at_pixel","x","next","count","total","value","getOutputData","_getResampleOptions","width","RangeError","duration","abortSignal","resample","resampler","concat","self","otherWaveforms","slice","call","arguments","forEach","otherWaveform","combinedBuffer","_concatBuffers","apply","headerSize","totalSize","totalDataLength","bufferCollection","w","dataSize","byteLength","totalBuffer","sourceHeader","totalBufferView","setUint8","getUint8","dataOfTotalBuffer","Uint8Array","set","startIndex","endIndex","startTime","endTime","at_time","output_data","getUint32","Boolean","pixels_per_second","seconds_per_pixel","at_sample","getInt8","getInt16","set_at","time","toJSON","waveform","toArrayBuffer"],"mappings":"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"}